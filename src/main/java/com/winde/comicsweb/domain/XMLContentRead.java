/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.winde.comicsweb.domain;

import java.io.*;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.channels.OverlappingFileLockException;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.w3c.dom.*;

import javax.xml.parsers.*;

import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 *
 * @author Winde
 */
public class XMLContentRead {

    private File fichero;
    private Element root = null;
    private Document doc = null;

    private XMLContentRead(File fichero) {
        this.fichero = fichero;
    }

    public static XMLContentRead createXMLContentRead(String path) {
        File fichero = new File(path);
        XMLContentRead xml = new XMLContentRead(fichero);
        if (fichero.exists()) {
            if (xml.readFromFile(fichero)) {
                return xml;
            } else {
                return null;
            }
        } else {
            if (!xml.createBasicXML()) {
                return null;
            }
            if (xml.flush()) {
                return xml;
            } else {
                return null;
            }
        }
    }

    private String readFileAsString(String filePath)
            throws java.io.IOException {
        try {
            StringBuffer fileData = new StringBuffer(1000);
            BufferedReader reader = new BufferedReader(
                    new FileReader(filePath));
            char[] buf = new char[1024];
            int numRead = 0;
            while ((numRead = reader.read(buf)) != -1) {
                String readData = String.valueOf(buf, 0, numRead);
                fileData.append(readData);
                buf = new char[1024];
            }
            reader.close();
            return fileData.toString();
        } catch (java.io.IOException e) {
            return null;
        }
    }

    private boolean readFromFile(File f) {
        DocumentBuilderFactory factory =
                DocumentBuilderFactory.newInstance();
        //factory.setNamespaceAware(true);
        //factory.setValidating(true); 

        try {

            DocumentBuilder builder =
                    factory.newDocumentBuilder();
            doc = builder.parse(f);
            NodeList childNodes = doc.getChildNodes();
            root = (Element) childNodes.item(0);
            return true;

        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("\n** Parsing error"
                    + ", line " + spe.getLineNumber()
                    + ", uri " + spe.getSystemId());
            System.out.println("  " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;
            if (spe.getException() != null) {
                x = spe.getException();
            }
            x.printStackTrace();
            return false;

        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;
            if (sxe.getException() != null) {
                x = sxe.getException();
            }
            x.printStackTrace();
            return false;

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
            return false;

        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
            return false;
        }
    }

    public boolean flush() {
        boolean resultado = true;
        FileOutputStream out=null;
        try {
            // Use a Transformer for output
            TransformerFactory tFactory =
                    TransformerFactory.newInstance();
            Transformer transformer;

            transformer = tFactory.newTransformer();


            DOMSource source = new DOMSource(doc);
            out = new FileOutputStream(fichero);
            StreamResult result = new StreamResult(out);
            transformer.transform(source, result);
            
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            System.out.println("* Transformer Factory error");
            System.out.println("  " + tce.getMessage());

            // Use the contained exception, if any
            Throwable x = tce;
            if (tce.getException() != null) {
                x = tce.getException();
            }
            x.printStackTrace();
            resultado = false;
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("* Transformation error");
            System.out.println("  " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;
            if (te.getException() != null) {
                x = te.getException();
            }
            x.printStackTrace();
            resultado = false;
        } finally {
            if (out!=null) {
                try {
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(XMLContentRead.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return resultado;
        }
    }

    public boolean createBasicXML() {
        //We need a Document
        DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder;
        try {
            docBuilder = dbfac.newDocumentBuilder();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(XMLContentRead.class.getName()).log(Level.SEVERE, null, ex);
            root = null;
            doc = null;
            return false;
        }
        doc = docBuilder.newDocument();

        ////////////////////////
        //Creating the XML tree

        //create the root element and add it to the document
        root = doc.createElement("root");
        doc.appendChild(root);
        return true;
    }

    private boolean setFileProperty(String filename, String propertyName, String value) {
        Node fileNode = getFileNode(filename);
        if (fileNode != null) {
            Node readNode = null;
            NodeList filenameChildNodes = fileNode.getChildNodes();
            if (filenameChildNodes == null) {
                return false;
            }

            for (int j = 0; j < filenameChildNodes.getLength(); j++) {
                Node tempReadNode = filenameChildNodes.item(j);
                Element readElement = (Element) tempReadNode;
                if (propertyName.equals(readElement.getAttribute("name"))) {
                    readNode = tempReadNode;
                }
            }

            Element readElement = null;
            if ((readNode) != null) {
                readElement = (Element) readNode;
                readElement.setAttribute("value", value);
            } else {
                readElement = doc.createElement("property");
                readElement.setAttribute("name", propertyName);
                readElement.setAttribute("value", value);
                fileNode.appendChild(readElement);
            }
        } else {
            Element childNode = doc.createElement("element");
            childNode.setAttribute("name", filename);
            root.appendChild(childNode);

            Element readNode = doc.createElement("property");
            readNode.setAttribute("name", propertyName);
            readNode.setAttribute("value", value);
            childNode.appendChild(readNode);
        }
        return true;
    }

    public boolean setFileNotRead(String filename) {
        return setFileProperty(filename, "read", Boolean.FALSE.toString());
    }

    public boolean setFileLastPage(String filename, Integer page) {
        return setFileProperty(filename, "lastreadpage", page.toString());
    }

    public boolean setFileRead(String filename, Boolean read) {
        return setFileProperty(filename, "read", read.toString());

    }

    private Node getFileNode(String filename) {
        if (root == null) {
            return null;
        } else {
            NodeList childNodes = root.getChildNodes();
            if (childNodes == null) {
                return null;
            }
            Node readProperty = null;
            for (int i = 0; i < childNodes.getLength(); i++) {
                Node node = childNodes.item(i);
                Element element = (Element) node;
                if (filename.equals(element.getAttribute("name"))) {
                    return node;
                }
            }
            return null;
        }
    }

    private Node getReadNode(Node fileNode) {
        NodeList filenameChildNodes = fileNode.getChildNodes();
        if (filenameChildNodes == null) {
            return null;
        }
        for (int j = 0; j < filenameChildNodes.getLength(); j++) {
            Node readNode = filenameChildNodes.item(j);
            Element readElement = (Element) readNode;
            if ("read".equals(readElement.getAttribute("name"))) {
                return readNode;
            }
        }
        return null;
    }

    private String getPropertyValue(String filename, String propertyname) {
        Node fileNode = getFileNode(filename);
        if (fileNode != null) {
            Node readNode = null;
            NodeList filenameChildNodes = fileNode.getChildNodes();
            if (filenameChildNodes == null) {
                return null;
            }
            for (int j = 0; j < filenameChildNodes.getLength(); j++) {
                Node tempReadNode = filenameChildNodes.item(j);
                Element readElement = (Element) tempReadNode;
                if (propertyname.equals(readElement.getAttribute("name"))) {
                    readNode = tempReadNode;
                }
            }
            if (readNode == null) {
                return null;
            }
            Element salida = (Element) readNode;
            return salida.getAttribute("value");
        }
        return null;
    }

    public Integer getLastReadPage(String filename) {
        String salida = getPropertyValue(filename, "lastreadpage");
        if (salida != null) {
            return Integer.parseInt(salida);
        } else {
            return null;
        }
    }

    public Boolean getReadValue(String filename) {
        String salida = getPropertyValue(filename, "read");
        if (salida != null) {
            return Boolean.parseBoolean(salida);
        } else {
            return null;
        }
    }

    @Override
    public String toString() {
        try {
            /////////////////
            //Output the XML

            //set up a transformer
            TransformerFactory transfac = TransformerFactory.newInstance();
            Transformer trans = transfac.newTransformer();
            trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            trans.setOutputProperty(OutputKeys.INDENT, "yes");

            //create string from xml tree
            StringWriter sw = new StringWriter();
            StreamResult result = new StreamResult(sw);
            DOMSource source = new DOMSource(doc);
            trans.transform(source, result);
            String xmlString = sw.toString();
            return xmlString;
        } catch (Exception ex) {
            System.out.println(ex.getClass());
            return null;
        }
    }
}
